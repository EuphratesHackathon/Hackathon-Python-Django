name: PyGoat CI/CD Pipeline

on:
  push:
    branches: [ devopss ]
  pull_request:
    branches: [ devopss ]

env:
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Security Scanning Job
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        id: dependency-check
        with:
          project: 'PyGoat'
          path: '.'
          format: 'HTML'
          out: 'reports'
          args: >
            --enableRetired
            --enableExperimental
            --disableBundleAudit
            --disableRubygems
            --disableNodeJS
            --disablePyPkg
        continue-on-error: true  # Don't fail the pipeline on security findings
            
      - name: Upload Dependency Check results
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: reports

      - name: Run Bandit Security Check (Python)
        run: |
          pip install bandit
          bandit -r ./introduction -r ./pygoat -r ./challenge -f json -o bandit-report.json || true
          bandit -r ./introduction -r ./pygoat -r ./challenge -f html -o bandit-report.html || true

      - name: Upload Bandit reports
        uses: actions/upload-artifact@v4
        with:
          name: bandit-reports
          path: |
            bandit-report.json
            bandit-report.html

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          ignore-unfixed: true
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
        continue-on-error: true  # Don't fail the pipeline on security findings

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # Code Quality Job
  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort pylint

      - name: Check code formatting with black
        run: |
          black --check --diff .
        continue-on-error: true  # Don't fail but show issues

      - name: Check imports with isort
        run: |
          isort --check-only --diff .
        continue-on-error: true  # Don't fail but show issues

      #- name: Lint code with flake8
       # run: |
       #S   flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  # Test Job
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12.0'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-django pytest-cov
     

     # - name: Run Django tests
     #   env:
     #     DJANGO_SETTINGS_MODULE: pygoat.settings_test
     #   run: |
     #     python manage.py test
     #
     # - name: Run pytest with coverage
     #   env:
     #     DJANGO_SETTINGS_MODULE: pygoat.settings_test
     #   run: |
     #    pytest --cov=. --cov-report=html --cov-report=xml || true

    #  - name: Upload coverage reports
     #   uses: actions/upload-artifact@v4
     #   if: always()
     #   with:
      #    name: coverage-report
      #    path: htmlcov/

      - name: Basic validation
        run: |
          echo "Skipping full tests due to time constraints"
          echo "Basic Python validation:"
          python -c "import django; print('Django imported successfully')"
          python -c "import pygoat.settings; print('Settings imported successfully')"

  # Build and Push Docker Images
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [test]
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for main app
        id: meta-main
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}/main
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha

      - name: Build and push main app
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta-main.outputs.tags }}
          labels: ${{ steps.meta-main.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push insec_des_lab
        uses: docker/build-push-action@v4
        with:
          context: ./dockerized_labs/insec_des_lab
          file: ./dockerized_labs/insec_des_lab/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}/insec_des_lab:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push sensitive_data_exposure
        uses: docker/build-push-action@v4
        with:
          context: ./dockerized_labs/sensitive_data_exposure
          file: ./dockerized_labs/sensitive_data_exposure/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}/sensitive_data_exposure:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to staging (For Demo Purposes)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.ref == 'refs/heads/devopss'  # Changed from main to devopss
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Check for k8s directory
        run: |
          if [ ! -d "k8s" ]; then
            echo "k8s directory not found, creating..."
            mkdir k8s
            echo "Created k8s directory"
          fi

      - name: Create k8s deployment manifest
        run: |
          cat << EOF > k8s/deployment.yaml
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: pygoat-main
            labels:
              app: pygoat
          spec:
            replicas: 2
            selector:
              matchLabels:
                app: pygoat
            template:
              metadata:
                labels:
                  app: pygoat
              spec:
                containers:
                  - name: pygoat
                    image: ghcr.io/${{ github.repository }}/main:IMAGE_TAG
                    ports:
                      - containerPort: 8000
                    env:
                      - name: DJANGO_SETTINGS_MODULE
                        value: "pygoat.settings"
                      - name: SECRET_KEY
                        value: "demo-secret-key"  # Should use secrets in production
                      - name: POSTGRES_PASSWORD
                        value: "demo-password"    # Should use secrets in production
                    resources:
                      limits:
                        cpu: "1"
                        memory: "1Gi"
                      requests:
                        cpu: "500m"
                        memory: "512Mi"
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: pygoat-service
          spec:
            selector:
              app: pygoat
            ports:
              - protocol: TCP
                port: 80
                targetPort: 8000
            type: LoadBalancer
          EOF

      - name: Update image tags
        run: |
          sed -i "s|IMAGE_TAG|${{ github.sha }}|g" k8s/deployment.yaml

      - name: Display deployment manifest
        run: |
          echo "Generated Kubernetes manifest:"
          cat k8s/deployment.yaml

      # Comment out kubectl commands since we don't have a real cluster
      # - name: Install kubectl
      #   uses: azure/setup-kubectl@v3
      #   with:
      #     version: 'v1.25.0'

      # - name: Configure kubectl
      #   run: |
      #     echo "${{ secrets.KUBECONFIG }}" > kubeconfig.yaml
      #     export KUBECONFIG=kubeconfig.yaml

      # - name: Deploy to Kubernetes
      #   run: |
      #     kubectl apply -f k8s/